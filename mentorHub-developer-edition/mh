#!/bin/zsh

# By default zsh indexes arrays starting at 1, unlike bash. Will remove once migrated to bash
setopt KSH_ARRAYS

export COMMAND="$1"
export NEW_PROFILE="$2"
export INSTALL_PATH=$(dirname "$0")

# Initilize HOST_NAME for use in configuring cross domain links
export HOST_NAME=$(ifconfig | grep "inet " | grep -v "127.0.0.1" | awk '{print $2}')

# Initilize CONFIGURATIONS environment variable used by msm services
export CONFIGURATIONS=$(pwd)/configurations/


################################################################################
# Print Manual Page
################################################################################
function manual {
cat <<END
NAME
       mh - mentorHub Developers Edition

SYNOPSIS
       mh COMMAND

DESCRIPTION
       mh is a simple utility to run the mentorHub application, or portions 
       of it, in local docker containers. You must have docker desktop 
       installed

COMMANDS
    up [profile1, profile2, ...]
        Remove existing containers and launchs the profile specified. 
        This command will erase any existing data, and start the 
        system with a newly initialized database.

    down
        Remove existing containers. This will permanently delete the
        data in any existing databases.

    start
        restarts the previously stoped profile

    stop
        stop currently running profile.

    tail [service]
        tail the logs for a service

    update
        update the mentorHub Developer Edition
        pull a fresh copy of all containers

    reset
        delete all mh containers - usefull to reset mh if things get hosed

    clean
        Delete mentorHub-specific containers and images

    purge
        delete all docker containers and images

    version
        print the mentorHub-DE version

    logs
        tail the mh log file, ^c to excape

    current
        print the current profile

    setcurrent [profile]
        set the current profile

    uninstall
        Removes mentorHub-DE completely

PROFILES
    mongodb - the backing mongo database
    person-api - the API supporting the person UI and the mongodb
    person-ui - the SPA for person, and the API and backing database

END
}

################################################################################
# Print Usage
################################################################################
usage() {
  cat <<END

Usage: mh COMMAND

Commands:
  up             Launch containers from a profile
  down           Remove existing containers
  start          Restart a profile
  stop           Stop a profile
  tail           Tail a service log
  update         Update the mentorHub Developer Edition
  reset          Delete all mh containers
  clean          Delete mentorHub-specific containers and images
  purge          Delete all mh containers and images
  version        Print the mentorHub-DE version
  logs           Tail the log file (use ^C to escape)
  current        Print the current profile
  setcurrent     Manually set the current profile
  manual         Show the manual
  uninstall      Remove mh and all associated files
END
}

################################################################################
# Make sure Docker is running
################################################################################
function checkAndStartDocker {
    echo "checkAndStartDocker" >> $INSTALL_PATH/logs

    if ! docker info >/dev/null 2>&1; then
        echo "Docker is not running. Attempting to start Docker..."
        if [[ "$(uname -s)" == "Darwin" ]]; then
            open -a Docker
        elif [[ "$(uname -s)" == "Linux" ]]; then
            echo "Please ensure Docker is installed and start it manually."
            # For Linux, starting Docker depends on the installation method
            # systemctl start docker might work for systems using systemd
        fi
        # Wait a bit for Docker to start
        sleep 10
        if ! docker info >/dev/null 2>&1; then
            echo "Failed to start Docker. Please start Docker manually."
            exit 1
        fi
    fi
}

################################################################################
# Get the currently running profile
################################################################################
function getCurrentProfile {
    echo "getCurrentProfile" >> $INSTALL_PATH/logs
    CURRENT_PROFILES=()
    if [[ -f "$INSTALL_PATH/CURRENT" ]]; then
        CURRENT_PROFILES=( ${(s:,:)$(cat "$INSTALL_PATH/CURRENT")} )
    fi
    echo "CurrentProfile set: ${CURRENT_PROFILES[@]}" >> $INSTALL_PATH/logs
}

################################################################################
# Validate new Profile, prompt for valid profile
################################################################################
function getNewProfile {
    echo "getNewProfile" >> "$INSTALL_PATH/logs"
    local validProfile=0
    if [[ "$NEW_PROFILE" != *","* ]]; then 
        # Populate the PROFILES variable
        PROFILES=$(docker compose -f "$INSTALL_PATH/docker-compose.yaml" config --profiles)

        # First, check if NEW_PROFILE is already valid
        while IFS= read -r profile; do
            if [[ $NEW_PROFILE == $profile ]]; then
                validProfile=1
                break
            fi
        done <<< "$PROFILES"

        # If NEW_PROFILE is not valid, prompt the user to select a valid profile
        while [[ $validProfile -eq 0 ]]; do
            echo "Please select a profile from the following:"
            nl -w 3 -s ') ' <<< "$PROFILES"
            echo -n "Select the profile: "
            read -r inputProfile
            if [[ $inputProfile -ge 1 && $inputProfile -le $(wc -l <<< "$PROFILES") ]]; then
                NEW_PROFILE=$(sed -n "${inputProfile}p" <<< "$PROFILES")
                validProfile=1
            else
                echo "Invalid profile: $inputProfile. Please try again."
            fi
        done
    else
    # Split comma-separated list into an array
        NEW_PROFILE=( ${(s:,:)NEW_PROFILE} )
        validProfile=1
    fi
    echo "New Profile set $NEW_PROFILE" >> "$INSTALL_PATH/logs"
}

################################################################################
# docker compose down of current profile
################################################################################
function downCurrent {
    checkAndStartDocker
    getCurrentProfile
    echo "downCurrent $CURRENT_PROFILES" >> $INSTALL_PATH/logs
    if [[ -n $CURRENT_PROFILES ]]; then
    docker_compose_args=("--project-directory" "$INSTALL_PATH" "-f" "$INSTALL_PATH/docker-compose.yaml")
    for profile in "${CURRENT_PROFILES[@]}"; do
        docker_compose_args+=("--profile" "$profile")
    done
        docker compose "${docker_compose_args[@]}" down
        docker volume prune -f
        echo > "$INSTALL_PATH/CURRENT"
        echo "downCurrent Successful" >> $INSTALL_PATH/logs
    fi
}

################################################################################
# docker compose up of current profile
################################################################################
function upProfile {
    downCurrent    
    getNewProfile
    docker_compose_args=("--project-directory" "$INSTALL_PATH" "-f" "$INSTALL_PATH/docker-compose.yaml")
    for profile in "${NEW_PROFILE[@]}"; do
        docker_compose_args+=("--profile" "$profile")
    done
    echo "upProfile $NEW_PROFILE" >> $INSTALL_PATH/logs
    docker compose "${docker_compose_args[@]}" up --detach
    echo "$NEW_PROFILE" > "$INSTALL_PATH/CURRENT"
    echo "upProfile Successful" >> $INSTALL_PATH/logs
}

################################################################################
# docker compose stop of current profile
################################################################################
function stopCurrent {
    getCurrentProfile
    echo "stopCurrent $CURRENT_PROFILES" >> $INSTALL_PATH/logs
    if [[ -n $CURRENT_PROFILES ]]; then
        docker_compose_args=("--project-directory" "$INSTALL_PATH" "-f" "$INSTALL_PATH/docker-compose.yaml")
        for profile in "${CURRENT_PROFILES[@]}"; do
            docker_compose_args+=("--profile" "$profile")
        done
    docker compose "${docker_compose_args[@]}" stop
    fi
    echo "stopCurrent Successful" >> $INSTALL_PATH/logs
}

################################################################################
# docker compose start of new profile profile
################################################################################
function startCurrent {
    getCurrentProfile
    echo "startProfile $CURRENT_PROFILES" >> $INSTALL_PATH/logs
    if [[ -n $CURRENT_PROFILES ]]; then
        docker_compose_args=("--project-directory" "$INSTALL_PATH" "-f" "$INSTALL_PATH/docker-compose.yaml")
            for profile in "${CURRENT_PROFILES[@]}"; do
                docker_compose_args+=("--profile" "$profile")
            done
        docker compose "${docker_compose_args[@]}" start 
    fi
    echo "startCurrent Successful" >> $INSTALL_PATH/logs
}

################################################################################
# docker compose logs
################################################################################
function tailServiceLogs {
    echo "startTail ${NEW_PROFILE[@]}" >> $INSTALL_PATH/logs
    if [[ -n $NEW_PROFILE ]]; then
        docker_compose_args=("--project-directory" "$INSTALL_PATH" "logs")
        for profile in "${NEW_PROFILE[@]}"; do
            docker_compose_args+=("-f" "$profile")
        done
        docker compose "${docker_compose_args[@]}"
    fi
    echo "tail completed" >> $INSTALL_PATH/logs
}

################################################################################
# Update mentorHub-DE
################################################################################
function update {
    downCurrent
    echo "update configurations" >> $INSTALL_PATH/logs

    echo "fetching docker-compose.yaml"
    curl -o "$INSTALL_PATH/docker-compose.yaml" https://raw.githubusercontent.com/agile-learning-institute/mentorhub/main/docker-configurations/docker-compose.yaml 2>> /dev/null

    echo "Pulling Images"
    docker compose -f "$INSTALL_PATH/docker-compose.yaml" --profile '*' config --images | while read -r image; do
        echo "pulling $image" >> $INSTALL_PATH/logs 
        echo "pulling $image"
        docker pull "$image" >> $INSTALL_PATH/logs 2>&1
    done

    echo "Housekeeping orphaned images"
    docker image prune -f 2>> $INSTALL_PATH/logs

    echo "fetching mh"
    curl -o "$INSTALL_PATH/mh" https://raw.githubusercontent.com/agile-learning-institute/mentorhub/main/mentorHub-developer-edition/mh 2>> /dev/null

    echo "update Successful" >> $INSTALL_PATH/logs
}

################################################################################
# force rm all containers
################################################################################
function deleteContainers {
    echo "deleteContainers" >> "$INSTALL_PATH/logs"
    docker container ls -a --format "{{ .Names }}" | while read -r container; do
        echo "- removing container $container" >> "$INSTALL_PATH/logs"
        echo "- removing container $container" 
        docker container rm -f "$container" > /dev/null 2>&1
    done
    echo > "$INSTALL_PATH/CURRENT"
    echo "$(date) RESET - Logs Reset" > "$INSTALL_PATH/logs"
}

################################################################################
# force rm all images
################################################################################
function deleteImages {
    echo "deleteImages" >> $INSTALL_PATH/logs
    docker image ls -a --filter "dangling=false" --format "{{ .Repository }}:{{ .Tag }}" | while read -r image; do
        echo "- removing image $image" >> $INSTALL_PATH/logs
        echo "- removing image $image" 
        docker image rm -f "$image"  2>>&1 $INSTALL_PATH/logs
    done

    docker volume ls | awk 'NR > 1 {print $2}' | while read -r volume; do
        echo "- removing volume $volume" >> $INSTALL_PATH/logs
        echo "- removing volume $volume"
        docker volume rm -f "$volume" 2>>&1 $INSTALL_PATH/logs
    done

    echo "deleteImages Successful" >> $INSTALL_PATH/logs
}

################################################################################
# Clean up images and containers
################################################################################
function clean {
    echo "clean" >> $INSTALL_PATH/logs

    docker compose -f $INSTALL_PATH/docker-compose.yaml ps -a --format '{{ .Names }}' | while read -r container; do
        echo "- removing container $container" >> "$INSTALL_PATH/logs"
        echo "- removing container $container"
        docker container rm -f "$container" > /dev/null 2>&1
    done

    docker compose -f "$INSTALL_PATH/docker-compose.yaml" --profile '*' config --images | while read -r image; do
        echo "- removing image $image" >> $INSTALL_PATH/logs
        echo "- removing image $image"
        docker image rm -f "$image"  2>>&1 $INSTALL_PATH/logs
    done

    docker volume ls | awk 'NR > 1 {print $2}' | while read -r volume; do
        echo "- removing volume $volume" >> $INSTALL_PATH/logs
        echo "- removing volume $volume"
        docker volume rm -f "$volume" 2>>&1 $INSTALL_PATH/logs
    done

    echo "clean Successful" >> $INSTALL_PATH/logs

    echo > "$INSTALL_PATH/CURRENT"
    echo "$(date) RESET - Logs Reset" > "$INSTALL_PATH/logs"
}

################################################################################
# Uninstall mentorHub-DE
################################################################################
function uninstall {
    echo "uninstalling mentorHub Developer's Edition"
    deleteContainers
    deleteImages

    rm -rf $INSTALL_PATH

    echo "Done"
}

##########################################################################
# Main 
echo "$(date) mh start $COMMAND $NEW_PROFILE" >> "$INSTALL_PATH/logs"

case $COMMAND in

  "up")

    downCurrent
    upProfile
    ;;

  "down")

    downCurrent
    ;;

  "start")

    stopCurrent
    startCurrent
    ;;

  "stop")

    stopCurrent
    ;;

  "tail")

    tailServiceLogs
    ;;

  "update")

    update
    ;;

  "reset")

    deleteContainers
    ;;

  "clean")

    clean
    ;;

  "purge")

    deleteContainers
    deleteImages
    ;;

  "logs")

    tail -f $INSTALL_PATH/logs
    ;;

  "current")

    getCurrentProfile
    echo $CURRENT_PROFILES
    ;;

  "setcurrent")

    getNewProfile
    echo "Setting Profile to $NEW_PROFILE"
    echo "$NEW_PROFILE" > "$INSTALL_PATH/CURRENT"
    ;;

  "version")

    echo "v1.1.1"
    ;;

  "manual")

    manual
    ;;

  "uninstall")

    uninstall
    ;;

  *)

    usage
    ;;

  esac

exit 0
# End Main 
##########################################################################
